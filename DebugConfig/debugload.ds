############################################################
#
# Copyright University of Leeds 2017
# All Rights Reserved
# File: debugload.ds
#
############################################################

#
# Perform a reset of the system and stop it running to get
# the hardware back to some known place
#
reset hardware
stop
wait 10s

# Processor should now be stopped at 0x00000000
info core

#
# We need to add a hw breakpoint at a specific place. This is actually
# within the preloader just before it launches the bare metal image in
# DDR. We want to stop at this point so that the system has already been
# initialsed by the preloader (including the DDR), after which we
# will be able to access the both the DDR and FPGA memory with the
# debugger to force upload our bare metal image.
#

#
# Add the symbol file for the bootloader so that ArmDS can find a specific
# function
#
add-symbol-file "$sdir/Bootloader.axf"

#
# Enable semihosting to allow printf
#
set semihosting enabled 1

#
# Add a breakpoint at a specific point in the bootloader where the SoC
# is ready to receive our new image.
#
thbreak debugEntry

#
# Tell target to continue executing preloader. Remember it's currently
# stopped at 0x00000000 and needs to run through the preloader to reach
# our breakpoint
#
cont

#
# Now wait for breakpoint to be hit. It won't take 10 seconds, but that
# will be our timeout should something go wrong.
#
wait 10s

#
# We are now stopped just before the bare metal app is launched. Let's
# now hand over to the debugger to upload your bare metal app.
#

